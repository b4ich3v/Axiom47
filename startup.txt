XDP47 – Windows PowerShell Cheatsheet
=====================================
All commands assume your project lives in:  D:\XDP47
Postgres (psql.exe) is at:                  D:\PostgreSQL\bin\psql.exe
API/UI root:                                http://127.0.0.1:8080

TIP: Open a **new** PowerShell window for each long-running process (control/agent).


0) Stop everything (safe to run anytime)
----------------------------------------
taskkill /IM xdp47-agent.exe /F
taskkill /IM xdp47-control.exe /F


1) (Optional) Reset database tables (start clean)
-------------------------------------------------
# Deletes all rows from devices, rollouts, rollout_runs
& "D:\PostgreSQL\bin\psql.exe" -U postgres -d xdp47 -c "DELETE FROM rollout_runs; DELETE FROM rollouts; DELETE FROM devices;"

# Example: add 'track=canary-only' to a device after it's created
# & "D:\PostgreSQL\bin\psql.exe" -U postgres -d xdp47 -c "UPDATE devices SET labels = jsonb_set(labels,'{track}','\"canary-only\"',true) WHERE id='<DEVICE_ID>'"


2) Build (from project root)
----------------------------
cd D:\XDP47
mingw32-make build


3) Start CONTROL plane (one window, keep it open)
-------------------------------------------------
cd D:\XDP47
$env:XDP47_DB_URL="postgres://postgres:drishlyoto1@localhost:5432/xdp47?sslmode=disable"
$env:XDP47_LISTEN_ADDR=":8080"

# Scheduler tuning for local tests (safer defaults)
$env:XDP47_SCHED_INTERVAL="5s"
$env:XDP47_SCHED_GRACE="3m"
$env:XDP47_SCHED_REQUIRE_OK="false"
$env:XDP47_SCHED_SKIP_OFFLINE="true"

.\bin\xdp47-control.exe
# UI: http://127.0.0.1:8080/ui/devices  and  http://127.0.0.1:8080/ui/rollouts


4) Start a single AGENT (new PowerShell window)
-----------------------------------------------
cd D:\XDP47
$env:XDP47_CONTROL_URL="http://127.0.0.1:8080"
$env:XDP47_TENANT="demo-tenant"
$env:XDP47_DEVICE_LABELS="store=sofia-01,role=kiosk,track=canary-only"
$env:XDP47_CHANNEL="canary"
$env:XDP47_VERSION="app:v1.2.3"
.\bin\xdp47-agent.exe


5) Start N agents quickly (each in its own window) – EXAMPLES
-------------------------------------------------------------
# 5.1) Second agent (manual)
Start-Process -NoNewWindow -PassThru powershell -ArgumentList @(
  '-NoExit','-Command',
  'cd D:\XDP47; $env:XDP47_CONTROL_URL="http://127.0.0.1:8080"; $env:XDP47_TENANT="demo-tenant"; $env:XDP47_DEVICE_LABELS="store=sofia-01,role=kiosk,track=canary-only"; $env:XDP47_CHANNEL="canary"; $env:XDP47_VERSION="app:v1.2.3"; .\bin\xdp47-agent.exe'
)

# 5.2) Launch 3 agents in separate consoles (labels differ a bit)
1..3 | ForEach-Object {
  $track = "canary-only"
  $labels = "store=sofia-01,role=kiosk,track=$track"
  Start-Process powershell -ArgumentList @(
    '-NoExit','-Command',
    "cd D:\XDP47; \$env:XDP47_CONTROL_URL='http://127.0.0.1:8080'; \$env:XDP47_TENANT='demo-tenant'; \$env:XDP47_DEVICE_LABELS='$labels'; \$env:XDP47_CHANNEL='canary'; \$env:XDP47_VERSION='app:v1.2.3'; .\bin\xdp47-agent.exe"
  )
}


6) Quick API checks
-------------------
# Health
Invoke-RestMethod -Method Get -Uri "http://127.0.0.1:8080/healthz"

# Devices (pretty print)
Invoke-RestMethod -Method Get -Uri "http://127.0.0.1:8080/api/devices" | ConvertTo-Json -Depth 6

# Rollouts list
Invoke-RestMethod -Method Get -Uri "http://127.0.0.1:8080/api/rollouts" | ConvertTo-Json -Depth 6


7) Create a rollout (canary -> track=canary-only) and Start it
--------------------------------------------------------------
# Create
$body = @'
{"tenant":"demo-tenant","artifact":"app:v2.1.2","channel":"canary","selector":{"track":"canary-only"},"waves":2}
'@
$r = Invoke-RestMethod -Method Post -Uri "http://127.0.0.1:8080/api/rollouts" -ContentType "application/json" -Body $body
$r

# Start (try both URL forms; one will work)
try {
  Invoke-RestMethod -Method Post -Uri "http://127.0.0.1:8080/api/rollouts/$($r.id)/start"
} catch {
  Invoke-RestMethod -Method Post -Uri "http://127.0.0.1:8080/api/rollouts/$($r.id):start"
}

# Details (runs per wave)
Invoke-RestMethod -Method Get -Uri "http://127.0.0.1:8080/api/rollouts/$($r.id)/runs" | ConvertTo-Json -Depth 6


8) Useful one‑liners
--------------------
# Add 'track=canary-only' to ALL existing devices
& "D:\PostgreSQL\bin\psql.exe" -U postgres -d xdp47 -c "UPDATE devices SET labels = jsonb_set(labels,'{track}','\"canary-only\"',true) WHERE (labels->>'track') IS NULL;"

# Show rollout runs (latest 10; run inside psql)
#   SELECT rollout_id, wave_index, status, started_at, finished_at
#   FROM rollout_runs ORDER BY started_at DESC LIMIT 10;

# Rebuild & restart control quickly
taskkill /IM xdp47-control.exe /F
cd D:\XDP47; mingw32-make build; `
$env:XDP47_DB_URL="postgres://postgres:drishlyoto1@localhost:5432/xdp47?sslmode=disable"; `
$env:XDP47_LISTEN_ADDR=":8080"; `
$env:XDP47_SCHED_INTERVAL="5s"; $env:XDP47_SCHED_GRACE="3m"; $env:XDP47_SCHED_REQUIRE_OK="false"; $env:XDP47_SCHED_SKIP_OFFLINE="true"; `
.\bin\xdp47-control.exe


9) Troubleshooting notes
------------------------
• If rollout status becomes 'failed':
  - Ensure at least one device matches the selector (e.g. track=canary-only), is 'ok' and has a fresh 'Last seen'.
  - Keep XDP47_SCHED_REQUIRE_OK=false and XDP47_SCHED_SKIP_OFFLINE=true during local tests.
  - Watch the control window logs for clear reason (e.g. no candidates / offline).

• If PowerShell says “Unexpected token …” for psql line, always invoke psql via:  & "D:\PostgreSQL\bin\psql.exe"  (note the & and quotes).

• If UI shows old data, hard refresh the page (Ctrl+F5).
